// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ResourceSpec defines the desired state of Resource.
//
// Represents an API resource.
type ResourceSpec struct {

// The parent resource's identifier.
ParentID *string `json:"parentID,omitempty"`
ParentRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"parentRef,omitempty"`
// The last path segment for this resource.
// +kubebuilder:validation:Required
PathPart *string `json:"pathPart"`
// The string identifier of the associated RestApi.
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
RestAPIID *string `json:"restAPIID,omitempty"`
RestAPIRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"restAPIRef,omitempty"`
}

// ResourceStatus defines the observed state of Resource
type ResourceStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The resource's identifier.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty"`
	// The full path for this resource.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty"`
}

// Resource is the Schema for the Resources API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Resource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   ResourceSpec   `json:"spec,omitempty"`
	Status ResourceStatus `json:"status,omitempty"`
}

// ResourceList contains a list of Resource
// +kubebuilder:object:root=true
type ResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []Resource `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Resource{}, &ResourceList{})
}