// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// IntegrationSpec defines the desired state of Integration.
//
// Represents an HTTP, HTTP_PROXY, AWS, AWS_PROXY, or Mock integration.
type IntegrationSpec struct {

// A list of request parameters whose values API Gateway caches. To be valid
// values for cacheKeyParameters, these parameters must also be specified for
// Method requestParameters.
CacheKeyParameters []*string `json:"cacheKeyParameters,omitempty"`
// Specifies a group of related cached parameters. By default, API Gateway uses
// the resource ID as the cacheNamespace. You can specify the same cacheNamespace
// across resources to return the same cached data for requests to different
// resources.
CacheNamespace *string `json:"cacheNamespace,omitempty"`
// The ID of the VpcLink used for the integration. Specify this value only if
// you specify VPC_LINK as the connection type.
ConnectionID *string `json:"connectionID,omitempty"`
ConnectionRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"connectionRef,omitempty"`
// The type of the network connection to the integration endpoint. The valid
// value is INTERNET for connections through the public routable internet or
// VPC_LINK for private connections between API Gateway and a network load balancer
// in a VPC. The default value is INTERNET.
ConnectionType *string `json:"connectionType,omitempty"`
// Specifies how to handle request payload content type conversions. Supported
// values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:
// 
// If this property is not defined, the request payload will be passed through
// from the method request to integration request without modification, provided
// that the passthroughBehavior is configured to support payload pass-through.
ContentHandling *string `json:"contentHandling,omitempty"`
// Specifies whether credentials are required for a put integration.
Credentials *string `json:"credentials,omitempty"`
// Specifies the HTTP method for the integration.
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
// +kubebuilder:validation:Required
HTTPMethod *string `json:"httpMethod"`
// The HTTP method for the integration.
IntegrationHTTPMethod *string `json:"integrationHTTPMethod,omitempty"`
// Specifies the pass-through behavior for incoming requests based on the Content-Type
// header in the request, and the available mapping templates specified as the
// requestTemplates property on the Integration resource. There are three valid
// values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.
PassthroughBehavior *string `json:"passthroughBehavior,omitempty"`
// A key-value map specifying request parameters that are passed from the method
// request to the back end. The key is an integration request parameter name
// and the associated value is a method request parameter value or static value
// that must be enclosed within single quotes and pre-encoded as required by
// the back end. The method request parameter value must match the pattern of
// method.request.{location}.{name}, where location is querystring, path, or
// header and name must be a valid and unique method request parameter name.
RequestParameters map[string]*string `json:"requestParameters,omitempty"`
// Represents a map of Velocity templates that are applied on the request payload
// based on the value of the Content-Type header sent by the client. The content
// type value is the key in this map, and the template (as a String) is the
// value.
RequestTemplates map[string]*string `json:"requestTemplates,omitempty"`
// Specifies a put integration request's resource ID.
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
ResourceID *string `json:"resourceID,omitempty"`
ResourceRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"resourceRef,omitempty"`
// The string identifier of the associated RestApi.
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
RestAPIID *string `json:"restAPIID,omitempty"`
RestAPIRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"restAPIRef,omitempty"`
// Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000
// milliseconds or 29 seconds.
TimeoutInMillis *int64 `json:"timeoutInMillis,omitempty"`
TLSConfig *TLSConfig `json:"tlsConfig,omitempty"`
// Specifies a put integration input's type.
// +kubebuilder:validation:XValidation:rule="self == oldSelf",message="Value is immutable once set"
// +kubebuilder:validation:Required
Type *string `json:"type,omitempty"`
// Specifies Uniform Resource Identifier (URI) of the integration endpoint.
// For HTTP or HTTP_PROXY integrations, the URI must be a fully formed, encoded
// HTTP(S) URL according to the RFC-3986 specification, for either standard
// integration, where connectionType is not VPC_LINK, or private integration,
// where connectionType is VPC_LINK. For a private HTTP integration, the URI
// is not used for routing. For AWS or AWS_PROXY integrations, the URI is of
// the form arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}.
// Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is
// the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain}
// is a designated subdomain supported by certain Amazon Web Services service
// for fast host-name lookup. action can be used for an Amazon Web Services
// service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query
// string. The ensuing {service_api} refers to a supported action {name} plus
// any required input parameters. Alternatively, path can be used for an Amazon
// Web Services service path-based API. The ensuing service_api refers to the
// path to an Amazon Web Services service resource, including the region of
// the integrated Amazon Web Services service, if applicable. For example, for
// integration with the S3 API of GetObject, the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}
// or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}.
URI *string `json:"uri,omitempty"`
}

// IntegrationStatus defines the observed state of Integration
type IntegrationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// Specifies the integration's responses.
	// +kubebuilder:validation:Optional
	IntegrationResponses map[string]*IntegrationResponse `json:"integrationResponses,omitempty"`
}

// Integration is the Schema for the Integrations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type Integration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec   IntegrationSpec   `json:"spec,omitempty"`
	Status IntegrationStatus `json:"status,omitempty"`
}

// IntegrationList contains a list of Integration
// +kubebuilder:object:root=true
type IntegrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []Integration `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Integration{}, &IntegrationList{})
}