// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package stage

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/apigateway"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/apigateway/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/apigateway-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Stage{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetStageOutput
	resp, err = rm.sdkapi.GetStage(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetStage", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.AccessLogSettings != nil {
		f0 := &svcapitypes.AccessLogSettings{}
		if resp.AccessLogSettings.DestinationArn != nil {
			f0.DestinationARN = resp.AccessLogSettings.DestinationArn
		}
		if resp.AccessLogSettings.Format != nil {
			f0.Format = resp.AccessLogSettings.Format
		}
		ko.Status.AccessLogSettings = f0
	} else {
		ko.Status.AccessLogSettings = nil
	}
	ko.Spec.CacheClusterEnabled = &resp.CacheClusterEnabled
	if resp.CacheClusterSize != "" {
		ko.Spec.CacheClusterSize = aws.String(string(resp.CacheClusterSize))
	} else {
		ko.Spec.CacheClusterSize = nil
	}
	if resp.CacheClusterStatus != "" {
		ko.Status.CacheClusterStatus = aws.String(string(resp.CacheClusterStatus))
	} else {
		ko.Status.CacheClusterStatus = nil
	}
	if resp.CanarySettings != nil {
		f4 := &svcapitypes.CanarySettings{}
		if resp.CanarySettings.DeploymentId != nil {
			f4.DeploymentID = resp.CanarySettings.DeploymentId
		}
		f4.PercentTraffic = &resp.CanarySettings.PercentTraffic
		if resp.CanarySettings.StageVariableOverrides != nil {
			f4.StageVariableOverrides = aws.StringMap(resp.CanarySettings.StageVariableOverrides)
		}
		f4.UseStageCache = &resp.CanarySettings.UseStageCache
		ko.Spec.CanarySettings = f4
	} else {
		ko.Spec.CanarySettings = nil
	}
	if resp.ClientCertificateId != nil {
		ko.Status.ClientCertificateID = resp.ClientCertificateId
	} else {
		ko.Status.ClientCertificateID = nil
	}
	if resp.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.DeploymentId != nil {
		ko.Spec.DeploymentID = resp.DeploymentId
	} else {
		ko.Spec.DeploymentID = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.DocumentationVersion != nil {
		ko.Spec.DocumentationVersion = resp.DocumentationVersion
	} else {
		ko.Spec.DocumentationVersion = nil
	}
	if resp.LastUpdatedDate != nil {
		ko.Status.LastUpdatedDate = &metav1.Time{*resp.LastUpdatedDate}
	} else {
		ko.Status.LastUpdatedDate = nil
	}
	if resp.MethodSettings != nil {
		f11 := map[string]*svcapitypes.MethodSetting{}
		for f11key, f11valiter := range resp.MethodSettings {
			f11val := &svcapitypes.MethodSetting{}
			f11val.CacheDataEncrypted = &f11valiter.CacheDataEncrypted
			cacheTTLInSecondsCopy := int64(f11valiter.CacheTtlInSeconds)
			f11val.CacheTTLInSeconds = &cacheTTLInSecondsCopy
			f11val.CachingEnabled = &f11valiter.CachingEnabled
			f11val.DataTraceEnabled = &f11valiter.DataTraceEnabled
			if f11valiter.LoggingLevel != nil {
				f11val.LoggingLevel = f11valiter.LoggingLevel
			}
			f11val.MetricsEnabled = &f11valiter.MetricsEnabled
			f11val.RequireAuthorizationForCacheControl = &f11valiter.RequireAuthorizationForCacheControl
			throttlingBurstLimitCopy := int64(f11valiter.ThrottlingBurstLimit)
			f11val.ThrottlingBurstLimit = &throttlingBurstLimitCopy
			f11val.ThrottlingRateLimit = &f11valiter.ThrottlingRateLimit
			if f11valiter.UnauthorizedCacheControlHeaderStrategy != "" {
				f11val.UnauthorizedCacheControlHeaderStrategy = aws.String(string(f11valiter.UnauthorizedCacheControlHeaderStrategy))
			}
			f11[f11key] = f11val
		}
		ko.Status.MethodSettings = f11
	} else {
		ko.Status.MethodSettings = nil
	}
	if resp.StageName != nil {
		ko.Spec.StageName = resp.StageName
	} else {
		ko.Spec.StageName = nil
	}
	if resp.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	ko.Spec.TracingEnabled = &resp.TracingEnabled
	if resp.Variables != nil {
		ko.Spec.Variables = aws.StringMap(resp.Variables)
	} else {
		ko.Spec.Variables = nil
	}
	if resp.WebAclArn != nil {
		ko.Status.WebACLARN = resp.WebAclArn
	} else {
		ko.Status.WebACLARN = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.RestAPIID == nil || r.ko.Spec.StageName == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetStageInput, error) {
	res := &svcsdk.GetStageInput{}

	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}
	if r.ko.Spec.StageName != nil {
		res.StageName = r.ko.Spec.StageName
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateStageOutput
	_ = resp
	resp, err = rm.sdkapi.CreateStage(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateStage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AccessLogSettings != nil {
		f0 := &svcapitypes.AccessLogSettings{}
		if resp.AccessLogSettings.DestinationArn != nil {
			f0.DestinationARN = resp.AccessLogSettings.DestinationArn
		}
		if resp.AccessLogSettings.Format != nil {
			f0.Format = resp.AccessLogSettings.Format
		}
		ko.Status.AccessLogSettings = f0
	} else {
		ko.Status.AccessLogSettings = nil
	}
	ko.Spec.CacheClusterEnabled = &resp.CacheClusterEnabled
	if resp.CacheClusterSize != "" {
		ko.Spec.CacheClusterSize = aws.String(string(resp.CacheClusterSize))
	} else {
		ko.Spec.CacheClusterSize = nil
	}
	if resp.CacheClusterStatus != "" {
		ko.Status.CacheClusterStatus = aws.String(string(resp.CacheClusterStatus))
	} else {
		ko.Status.CacheClusterStatus = nil
	}
	if resp.CanarySettings != nil {
		f4 := &svcapitypes.CanarySettings{}
		if resp.CanarySettings.DeploymentId != nil {
			f4.DeploymentID = resp.CanarySettings.DeploymentId
		}
		f4.PercentTraffic = &resp.CanarySettings.PercentTraffic
		if resp.CanarySettings.StageVariableOverrides != nil {
			f4.StageVariableOverrides = aws.StringMap(resp.CanarySettings.StageVariableOverrides)
		}
		f4.UseStageCache = &resp.CanarySettings.UseStageCache
		ko.Spec.CanarySettings = f4
	} else {
		ko.Spec.CanarySettings = nil
	}
	if resp.ClientCertificateId != nil {
		ko.Status.ClientCertificateID = resp.ClientCertificateId
	} else {
		ko.Status.ClientCertificateID = nil
	}
	if resp.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.DeploymentId != nil {
		ko.Spec.DeploymentID = resp.DeploymentId
	} else {
		ko.Spec.DeploymentID = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.DocumentationVersion != nil {
		ko.Spec.DocumentationVersion = resp.DocumentationVersion
	} else {
		ko.Spec.DocumentationVersion = nil
	}
	if resp.LastUpdatedDate != nil {
		ko.Status.LastUpdatedDate = &metav1.Time{*resp.LastUpdatedDate}
	} else {
		ko.Status.LastUpdatedDate = nil
	}
	if resp.MethodSettings != nil {
		f11 := map[string]*svcapitypes.MethodSetting{}
		for f11key, f11valiter := range resp.MethodSettings {
			f11val := &svcapitypes.MethodSetting{}
			f11val.CacheDataEncrypted = &f11valiter.CacheDataEncrypted
			cacheTTLInSecondsCopy := int64(f11valiter.CacheTtlInSeconds)
			f11val.CacheTTLInSeconds = &cacheTTLInSecondsCopy
			f11val.CachingEnabled = &f11valiter.CachingEnabled
			f11val.DataTraceEnabled = &f11valiter.DataTraceEnabled
			if f11valiter.LoggingLevel != nil {
				f11val.LoggingLevel = f11valiter.LoggingLevel
			}
			f11val.MetricsEnabled = &f11valiter.MetricsEnabled
			f11val.RequireAuthorizationForCacheControl = &f11valiter.RequireAuthorizationForCacheControl
			throttlingBurstLimitCopy := int64(f11valiter.ThrottlingBurstLimit)
			f11val.ThrottlingBurstLimit = &throttlingBurstLimitCopy
			f11val.ThrottlingRateLimit = &f11valiter.ThrottlingRateLimit
			if f11valiter.UnauthorizedCacheControlHeaderStrategy != "" {
				f11val.UnauthorizedCacheControlHeaderStrategy = aws.String(string(f11valiter.UnauthorizedCacheControlHeaderStrategy))
			}
			f11[f11key] = f11val
		}
		ko.Status.MethodSettings = f11
	} else {
		ko.Status.MethodSettings = nil
	}
	if resp.StageName != nil {
		ko.Spec.StageName = resp.StageName
	} else {
		ko.Spec.StageName = nil
	}
	if resp.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	ko.Spec.TracingEnabled = &resp.TracingEnabled
	if resp.Variables != nil {
		ko.Spec.Variables = aws.StringMap(resp.Variables)
	} else {
		ko.Spec.Variables = nil
	}
	if resp.WebAclArn != nil {
		ko.Status.WebACLARN = resp.WebAclArn
	} else {
		ko.Status.WebACLARN = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateStageInput, error) {
	res := &svcsdk.CreateStageInput{}

	if r.ko.Spec.CacheClusterEnabled != nil {
		res.CacheClusterEnabled = *r.ko.Spec.CacheClusterEnabled
	}
	if r.ko.Spec.CacheClusterSize != nil {
		res.CacheClusterSize = svcsdktypes.CacheClusterSize(*r.ko.Spec.CacheClusterSize)
	}
	if r.ko.Spec.CanarySettings != nil {
		f2 := &svcsdktypes.CanarySettings{}
		if r.ko.Spec.CanarySettings.DeploymentID != nil {
			f2.DeploymentId = r.ko.Spec.CanarySettings.DeploymentID
		}
		if r.ko.Spec.CanarySettings.PercentTraffic != nil {
			f2.PercentTraffic = *r.ko.Spec.CanarySettings.PercentTraffic
		}
		if r.ko.Spec.CanarySettings.StageVariableOverrides != nil {
			f2.StageVariableOverrides = aws.ToStringMap(r.ko.Spec.CanarySettings.StageVariableOverrides)
		}
		if r.ko.Spec.CanarySettings.UseStageCache != nil {
			f2.UseStageCache = *r.ko.Spec.CanarySettings.UseStageCache
		}
		res.CanarySettings = f2
	}
	if r.ko.Spec.DeploymentID != nil {
		res.DeploymentId = r.ko.Spec.DeploymentID
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.DocumentationVersion != nil {
		res.DocumentationVersion = r.ko.Spec.DocumentationVersion
	}
	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}
	if r.ko.Spec.StageName != nil {
		res.StageName = r.ko.Spec.StageName
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}
	if r.ko.Spec.TracingEnabled != nil {
		res.TracingEnabled = *r.ko.Spec.TracingEnabled
	}
	if r.ko.Spec.Variables != nil {
		res.Variables = aws.ToStringMap(r.ko.Spec.Variables)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		resourceARN, err := arnForResource(desired.ko)
		if err != nil {
			return nil, fmt.Errorf("applying tags: %w", err)
		}
		if err := syncTags(ctx, rm.sdkapi, rm.metrics, resourceARN, desired.ko.Spec.Tags, latest.ko.Spec.Tags); err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	updateStageInput(desired, latest, input, delta)

	var resp *svcsdk.UpdateStageOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateStage(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateStage", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.AccessLogSettings != nil {
		f0 := &svcapitypes.AccessLogSettings{}
		if resp.AccessLogSettings.DestinationArn != nil {
			f0.DestinationARN = resp.AccessLogSettings.DestinationArn
		}
		if resp.AccessLogSettings.Format != nil {
			f0.Format = resp.AccessLogSettings.Format
		}
		ko.Status.AccessLogSettings = f0
	} else {
		ko.Status.AccessLogSettings = nil
	}
	ko.Spec.CacheClusterEnabled = &resp.CacheClusterEnabled
	if resp.CacheClusterSize != "" {
		ko.Spec.CacheClusterSize = aws.String(string(resp.CacheClusterSize))
	} else {
		ko.Spec.CacheClusterSize = nil
	}
	if resp.CacheClusterStatus != "" {
		ko.Status.CacheClusterStatus = aws.String(string(resp.CacheClusterStatus))
	} else {
		ko.Status.CacheClusterStatus = nil
	}
	if resp.CanarySettings != nil {
		f4 := &svcapitypes.CanarySettings{}
		if resp.CanarySettings.DeploymentId != nil {
			f4.DeploymentID = resp.CanarySettings.DeploymentId
		}
		f4.PercentTraffic = &resp.CanarySettings.PercentTraffic
		if resp.CanarySettings.StageVariableOverrides != nil {
			f4.StageVariableOverrides = aws.StringMap(resp.CanarySettings.StageVariableOverrides)
		}
		f4.UseStageCache = &resp.CanarySettings.UseStageCache
		ko.Spec.CanarySettings = f4
	} else {
		ko.Spec.CanarySettings = nil
	}
	if resp.ClientCertificateId != nil {
		ko.Status.ClientCertificateID = resp.ClientCertificateId
	} else {
		ko.Status.ClientCertificateID = nil
	}
	if resp.CreatedDate != nil {
		ko.Status.CreatedDate = &metav1.Time{*resp.CreatedDate}
	} else {
		ko.Status.CreatedDate = nil
	}
	if resp.DeploymentId != nil {
		ko.Spec.DeploymentID = resp.DeploymentId
	} else {
		ko.Spec.DeploymentID = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.DocumentationVersion != nil {
		ko.Spec.DocumentationVersion = resp.DocumentationVersion
	} else {
		ko.Spec.DocumentationVersion = nil
	}
	if resp.LastUpdatedDate != nil {
		ko.Status.LastUpdatedDate = &metav1.Time{*resp.LastUpdatedDate}
	} else {
		ko.Status.LastUpdatedDate = nil
	}
	if resp.MethodSettings != nil {
		f11 := map[string]*svcapitypes.MethodSetting{}
		for f11key, f11valiter := range resp.MethodSettings {
			f11val := &svcapitypes.MethodSetting{}
			f11val.CacheDataEncrypted = &f11valiter.CacheDataEncrypted
			cacheTTLInSecondsCopy := int64(f11valiter.CacheTtlInSeconds)
			f11val.CacheTTLInSeconds = &cacheTTLInSecondsCopy
			f11val.CachingEnabled = &f11valiter.CachingEnabled
			f11val.DataTraceEnabled = &f11valiter.DataTraceEnabled
			if f11valiter.LoggingLevel != nil {
				f11val.LoggingLevel = f11valiter.LoggingLevel
			}
			f11val.MetricsEnabled = &f11valiter.MetricsEnabled
			f11val.RequireAuthorizationForCacheControl = &f11valiter.RequireAuthorizationForCacheControl
			throttlingBurstLimitCopy := int64(f11valiter.ThrottlingBurstLimit)
			f11val.ThrottlingBurstLimit = &throttlingBurstLimitCopy
			f11val.ThrottlingRateLimit = &f11valiter.ThrottlingRateLimit
			if f11valiter.UnauthorizedCacheControlHeaderStrategy != "" {
				f11val.UnauthorizedCacheControlHeaderStrategy = aws.String(string(f11valiter.UnauthorizedCacheControlHeaderStrategy))
			}
			f11[f11key] = f11val
		}
		ko.Status.MethodSettings = f11
	} else {
		ko.Status.MethodSettings = nil
	}
	if resp.StageName != nil {
		ko.Spec.StageName = resp.StageName
	} else {
		ko.Spec.StageName = nil
	}
	if resp.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	ko.Spec.TracingEnabled = &resp.TracingEnabled
	if resp.Variables != nil {
		ko.Spec.Variables = aws.StringMap(resp.Variables)
	} else {
		ko.Spec.Variables = nil
	}
	if resp.WebAclArn != nil {
		ko.Status.WebACLARN = resp.WebAclArn
	} else {
		ko.Status.WebACLARN = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateStageInput, error) {
	res := &svcsdk.UpdateStageInput{}

	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}
	if r.ko.Spec.StageName != nil {
		res.StageName = r.ko.Spec.StageName
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteStageOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteStage(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteStage", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteStageInput, error) {
	res := &svcsdk.DeleteStageInput{}

	if r.ko.Spec.RestAPIID != nil {
		res.RestApiId = r.ko.Spec.RestAPIID
	}
	if r.ko.Spec.StageName != nil {
		res.StageName = r.ko.Spec.StageName
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Stage,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "BadRequestException",
		"ConflictException",
		"NotFoundException",
		"InvalidParameter":
		return true
	default:
		return false
	}
}
